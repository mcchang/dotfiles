[user]
	name = Michael Chang
	email = aznm1ke31@gmail.com
[alias]
	r = "!sh ~/src/tellapart/run_tests.sh py && sh -c 'git push --receive-pack=\"git receive-pack --reviewer=$0@tellapart.com --reviewer=code-reviews@tellapart.com\" gerrit:tellapart HEAD:refs/for/master'"
	reviewsuperduperextremelyfast = "!sh -c 'git push --receive-pack=\"git receive-pack --reviewer=$0@tellapart.com --reviewer=code-reviews@tellapart.com\" gerrit:tellapart HEAD:refs/for/master'"
	reviewhook = "!sh -c '$TAHOME/py/tellapart/scripts/precommit_hook.py --review && git reviewsuperduperextremelyfast $0'"
	reviewutil = "!sh -c 'git push --receive-pack=\"git receive-pack --reviewer=$0@tellapart.com --reviewer=code-reviews@tellapart.com\" gerrit:tellapart_util HEAD:refs/for/master'"
	s = "status -s"
	s = "status"
	c = "commit"
	wc = "whatchanged"
	g = "grep --heading --break --color"
	co = "checkout"
	cof = "!f() { git co $1 && git fr; }; f"
	b = "branch -vv"
	p = "pull"
	rb = "rebase"
	st = "stash save -u"
	stl = "stash list"
	sp = "stash pop"
	fr = !git fetch && git rebase origin/master
	showchanged = "show --name-only"
	todos = "!git show | grep TODO | grep mike | grep ^+ | xargs -I todo echo todo | sed 's/.*: //' | git grep -f -"
	checkbranch = "!sh -c 'original_branch=$(git branch 2>/dev/null | grep '^*' | colrm 1 2); git checkout $0; git show; git checkout $original_branch'"
	d = diff
	cm = "!git checkout master && git pull"
	rbi = "rebase -i origin"
	cleanbranches = "!git checkout master && git pull && for b in `git branch --no-merged`; do git rebase master $b; done && git checkout master && git branch --merged | grep -v master$ | xargs -n 1 git branch -d"
	lg = "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
	lga = "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci) %C(bold blue)<%an>%Creset' --abbrev-commit"
	maxblame = "blame -wCCC"
	ksreview = "!f() { local SHA=${1:-HEAD}; local BRANCH=${2:-master}; if [ $SHA == $BRANCH ]; then SHA=HEAD; fi; git difftool -y -t Kaleidoscope $BRANCH...$SHA; }; f"
	ksshow = "!f() { local SHA=${1:-HEAD}; git difftool -y -t Kaleidoscope $SHA^..$SHA; }; f"
[color]
	branch = auto
	diff = auto
	grep = auto
	interactive = auto
	status = auto
	ui = auto
[grep]
	lineNumber = true
	extendedRegexp = true
[credential]
	helper = osxkeychain
[diff]
	tool = Kaleidoscope
	renames = copies
	mnemonicprefix = true
# 	external = /Users/mike/bin/git-filemerge.sh
[difftool]
	prompt = false
[help]
	autocorrect = 5
[core]
	excludesfile = /Users/mike/.gitignore_global
[difftool "sourcetree"]
	cmd = /usr/local/bin/ksdiff -- \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /usr/local/bin/ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" \"$REMOTE\"
	trustExitCode = true
[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true
[mergetool]
	prompt = false
[merge]
	tool = Kaleidoscope
